{"ast":null,"code":"var _jsxFileName = \"C:\\\\ReactJs\\\\hackersnews_workjam\\\\src\\\\App.js\";\nimport React, { Component, useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport MUIDataTable from \"mui-datatables\";\nimport \"./Dashboard.css\";\nimport NewItemAddedConfirmSnackbar from \"./NewItemAddedConfirmSnackbar\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\n\nconst isEqual = require(\"lodash.isequal\");\n\nconst differenceWith = require(\"lodash.differencewith\");\n\nconst omit = require(\"lodash.omit\");\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nconst getEachStoryGivenId = (id, index) => {\n  return new Promise((resolve, reject) => {\n    axios.get(`https://hacker-news.firebaseio.com/v0/item/${id}.json`).then(res => {\n      let story = res.data;\n      let result = omit(story, [\"descendants\", \"time\", \"id\", \"type\"]);\n\n      if (result && Object.entries(result).length !== 0 && result.constructor === Object) {\n        resolve(result);\n      } else {\n        reject(new Error(\"No data received\"));\n      }\n    });\n  });\n};\n\nconst App = () => {\n  const [prevStoriesIds, setPrevStoriesIds] = useState([]);\n  const [fetchedData, setFetchedData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [tableState, setTableState] = useState({});\n  const [openNewItemAddedConfirmSnackbar, setOpenNewItemAddedConfirmSnackbar] = useState(false);\n  const [noOfNewStoryAfterPolling, setNoOfNewStoryAfterPolling] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n\n  const onChangeRowsPerPage = rowsPerPage => {\n    setRowsPerPage(rowsPerPage);\n  };\n\n  const closeNewItemConfirmSnackbar = () => {\n    setOpenNewItemAddedConfirmSnackbar(false);\n    axios.get(\"https://hacker-news.firebaseio.com/v0/newstories.json\").then(storyIds => {\n      setPrevStoriesIds(storyIds.data.slice(0, 2));\n      getAllNewStory(storyIds);\n    });\n  };\n\n  const getAllNewStory = storyIds => {\n    setIsLoading(true);\n    let topStories = storyIds.data.slice(0, 2).map(getEachStoryGivenId);\n    let results = Promise.all(topStories);\n    results.then(res => {\n      setFetchedData(res);\n      setIsLoading(false);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const fromPrevStoriesIds = usePrevious(prevStoriesIds);\n  useEffect(() => {\n    const fetchData = () => {\n      axios.get(\"https://hacker-news.firebaseio.com/v0/newstories.json\").then(storyIds => {\n        //   console.log(\"STORY IDs FETCHED \", storyIds.data.slice(0, 2));\n        setPrevStoriesIds(storyIds.data.slice(0, 2));\n        getAllNewStory(storyIds);\n      });\n    };\n\n    fetchData();\n\n    const doPolling = () => {\n      var timer = setInterval(() => {\n        axios.get(\"https://hacker-news.firebaseio.com/v0/newstories.json\").then(storyIds => {\n          console.log(\"fromPrevStoriesIds INSIDE doPolling() \", fromPrevStoriesIds);\n\n          if (fromPrevStoriesIds !== undefined && !isEqual(fromPrevStoriesIds.sort(), storyIds.data.slice(0, 2).sort())) {\n            setPrevStoriesIds(storyIds.data.slice(0, 2));\n            setNoOfNewStoryAfterPolling(differenceWith(prevStoriesIds.sort(), storyIds.data.slice(0, 2).sort(), isEqual).length);\n            getAllNewStory(storyIds);\n            setOpenNewItemAddedConfirmSnackbar(true);\n          }\n        });\n      }, 5000);\n    };\n\n    doPolling(); // return () => {\n    //   console.log(\"cleaning up\");\n    //   clearInterval(timer);\n    // };\n  }, [rowsPerPage, noOfNewStoryAfterPolling]);\n  let renderedStoriesOnPage = [];\n\n  const getDataToRender = (() => {\n    renderedStoriesOnPage = fetchedData.map(i => {\n      return Object.values(i);\n    });\n    return renderedStoriesOnPage;\n  })();\n\n  const columnsOptions = [{\n    name: \"Author\",\n    sortDirection: tableState ? tableState.columns && tableState.columns[0].sortDirection : null\n  }, {\n    name: \"score\",\n    sortDirection: tableState ? tableState.columns && tableState.columns[1].sortDirection : null\n  }, {\n    name: \"title\",\n    sortDirection: tableState ? tableState.columns && tableState.columns[2].sortDirection : null\n  }, {\n    name: \"URL\",\n    options: {\n      filter: false,\n      customBodyRender: (value, tableMeta, updateValue) => {\n        // console.log(\"TABLE META IS \", JSON.stringify(tableMeta));\n        return React.createElement(\"a\", {\n          target: \"_blank\",\n          href: value,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172\n          },\n          __self: this\n        }, value);\n      }\n    }\n  }];\n  const options = {\n    filter: true,\n    selectableRows: false,\n    filterType: \"dropdown\",\n    responsive: \"stacked\",\n    selectableRows: \"multiple\",\n    rowsPerPage: tableState ? tableState.rowsPerPage : 10,\n    onChangeRowsPerPage: onChangeRowsPerPage,\n    activeColumn: tableState ? tableState.activeColumn : 0,\n    onTableChange: (action, tableState) => {\n      // console.log(\"taBLE STATE IS \", JSON.stringify(tableState));\n      setTableState(tableState);\n    }\n  };\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, console.log(\"fromPrevStoriesIds INSIDE RETURN --- \", fromPrevStoriesIds), React.createElement(\"div\", {\n    style: {\n      marginLeft: \"15px\",\n      marginTop: \"80px\",\n      display: \"flex\",\n      flexDirection: \"row\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    style: {\n      width: \"400px\",\n      paddingRight: \"15px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, \"Hacker News top 2\")), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, isLoading ? React.createElement(\"div\", {\n    className: \"interactions\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"lds-ring\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }))) : fetchedData.length !== 0 && renderedStoriesOnPage.length !== 0 ? React.createElement(MUIDataTable, {\n    title: \"Hacker News API top 2 result\",\n    data: renderedStoriesOnPage,\n    columns: columnsOptions,\n    options: options,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }) : null, React.createElement(NewItemAddedConfirmSnackbar, {\n    openNewItemAddedConfirmSnackbar: openNewItemAddedConfirmSnackbar,\n    closeNewItemConfirmSnackbar: closeNewItemConfirmSnackbar,\n    noOfNewStoryAfterPolling: noOfNewStoryAfterPolling,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/ReactJs/hackersnews_workjam/src/App.js"],"names":["React","Component","useState","useEffect","useRef","axios","MUIDataTable","NewItemAddedConfirmSnackbar","TextField","Button","isEqual","require","differenceWith","omit","usePrevious","value","ref","current","getEachStoryGivenId","id","index","Promise","resolve","reject","get","then","res","story","data","result","Object","entries","length","constructor","Error","App","prevStoriesIds","setPrevStoriesIds","fetchedData","setFetchedData","isLoading","setIsLoading","tableState","setTableState","openNewItemAddedConfirmSnackbar","setOpenNewItemAddedConfirmSnackbar","noOfNewStoryAfterPolling","setNoOfNewStoryAfterPolling","rowsPerPage","setRowsPerPage","onChangeRowsPerPage","closeNewItemConfirmSnackbar","storyIds","slice","getAllNewStory","topStories","map","results","all","catch","err","console","log","fromPrevStoriesIds","fetchData","doPolling","timer","setInterval","undefined","sort","renderedStoriesOnPage","getDataToRender","i","values","columnsOptions","name","sortDirection","columns","options","filter","customBodyRender","tableMeta","updateValue","selectableRows","filterType","responsive","activeColumn","onTableChange","action","marginLeft","marginTop","display","flexDirection","width","paddingRight"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport MUIDataTable from \"mui-datatables\";\nimport \"./Dashboard.css\";\nimport NewItemAddedConfirmSnackbar from \"./NewItemAddedConfirmSnackbar\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nconst isEqual = require(\"lodash.isequal\");\nconst differenceWith = require(\"lodash.differencewith\");\nconst omit = require(\"lodash.omit\");\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nconst getEachStoryGivenId = (id, index) => {\n  return new Promise((resolve, reject) => {\n    axios\n      .get(`https://hacker-news.firebaseio.com/v0/item/${id}.json`)\n      .then(res => {\n        let story = res.data;        \n        let result = omit(story, [\"descendants\", \"time\", \"id\", \"type\"]);        \n        if (\n          result &&\n          Object.entries(result).length !== 0 &&\n          result.constructor === Object\n        ) {\n          resolve(result);\n        } else {\n          reject(new Error(\"No data received\"));\n        }\n      });\n  });\n};\n\nconst App = () => {\n  const [prevStoriesIds, setPrevStoriesIds] = useState([]);\n  const [fetchedData, setFetchedData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [tableState, setTableState] = useState({});\n  const [\n    openNewItemAddedConfirmSnackbar,\n    setOpenNewItemAddedConfirmSnackbar\n  ] = useState(false);\n  const [noOfNewStoryAfterPolling, setNoOfNewStoryAfterPolling] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n\n  const onChangeRowsPerPage = rowsPerPage => {\n    setRowsPerPage(rowsPerPage);\n  };\n\n  const closeNewItemConfirmSnackbar = () => {\n    setOpenNewItemAddedConfirmSnackbar(false);\n    axios\n      .get(\"https://hacker-news.firebaseio.com/v0/newstories.json\")\n      .then(storyIds => {\n        setPrevStoriesIds(storyIds.data.slice(0, 2));\n        getAllNewStory(storyIds);\n      });\n  };\n\n  const getAllNewStory = storyIds => {\n    setIsLoading(true);\n    let topStories = storyIds.data.slice(0, 2).map(getEachStoryGivenId);\n    let results = Promise.all(topStories);\n    results\n      .then(res => {\n        setFetchedData(res);\n        setIsLoading(false);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n\n  const fromPrevStoriesIds = usePrevious(prevStoriesIds);\n\n  useEffect(() => {\n    const fetchData = () => {\n      axios\n        .get(\"https://hacker-news.firebaseio.com/v0/newstories.json\")\n        .then(storyIds => {\n          //   console.log(\"STORY IDs FETCHED \", storyIds.data.slice(0, 2));\n\n          setPrevStoriesIds(storyIds.data.slice(0, 2));\n          getAllNewStory(storyIds);\n        });\n    };\n    fetchData();\n\n    const doPolling = () => {\n      var timer = setInterval(() => {\n        axios\n          .get(\"https://hacker-news.firebaseio.com/v0/newstories.json\")\n          .then(storyIds => {            \n            console.log(\n              \"fromPrevStoriesIds INSIDE doPolling() \",\n              fromPrevStoriesIds\n            );\n\n            if (\n              fromPrevStoriesIds !== undefined &&\n              !isEqual(fromPrevStoriesIds.sort(), storyIds.data.slice(0, 2).sort())\n            ) {\n              setPrevStoriesIds(storyIds.data.slice(0, 2));\n              setNoOfNewStoryAfterPolling(\n                differenceWith(\n                  prevStoriesIds.sort(),\n                  storyIds.data.slice(0, 2).sort(),\n                  isEqual\n                ).length\n              );\n              getAllNewStory(storyIds);\n              setOpenNewItemAddedConfirmSnackbar(true);              \n            }\n          });\n      }, 5000);\n    };\n\n    doPolling();\n\n    // return () => {\n    //   console.log(\"cleaning up\");\n    //   clearInterval(timer);\n    // };\n  }, [rowsPerPage, noOfNewStoryAfterPolling]);\n\n\n  let renderedStoriesOnPage = [];\n  const getDataToRender = (() => {\n    renderedStoriesOnPage = fetchedData.map(i => {\n      return Object.values(i);\n    });\n    return renderedStoriesOnPage;\n  })();\n\n\n  const columnsOptions = [\n    {\n      name: \"Author\",\n      sortDirection: tableState\n        ? tableState.columns && tableState.columns[0].sortDirection\n        : null\n    },\n\n    {\n      name: \"score\",\n      sortDirection: tableState\n        ? tableState.columns && tableState.columns[1].sortDirection\n        : null\n    },\n\n    {\n      name: \"title\",\n      sortDirection: tableState\n        ? tableState.columns && tableState.columns[2].sortDirection\n        : null\n    },\n\n    {\n      name: \"URL\",\n      options: {\n        filter: false,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          // console.log(\"TABLE META IS \", JSON.stringify(tableMeta));\n          return (\n            <a target=\"_blank\" href={value}>\n              {value}\n            </a>\n          );\n        }\n      }\n    }\n  ];\n\n  const options = {\n    filter: true,\n    selectableRows: false,\n    filterType: \"dropdown\",\n    responsive: \"stacked\",\n    selectableRows: \"multiple\",\n    rowsPerPage: tableState ? tableState.rowsPerPage : 10,\n    onChangeRowsPerPage: onChangeRowsPerPage,\n    activeColumn: tableState ? tableState.activeColumn : 0,\n    onTableChange: (action, tableState) => {\n      // console.log(\"taBLE STATE IS \", JSON.stringify(tableState));\n      setTableState(tableState);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {console.log(\"fromPrevStoriesIds INSIDE RETURN --- \", fromPrevStoriesIds)}\n      <div\n        style={{\n          marginLeft: \"15px\",\n          marginTop: \"80px\",\n          display: \"flex\",\n          flexDirection: \"row\"\n        }}\n      >\n        <h4 style={{ width: \"400px\", paddingRight: \"15px\" }}>\n          Hacker News top 2\n        </h4>\n      </div>\n      <div>\n        {isLoading ? (\n          <div className=\"interactions\">\n            <div className=\"lds-ring\">\n              <div />\n              <div />\n              <div />\n              <div />\n            </div>\n          </div>\n        ) : fetchedData.length !== 0 && renderedStoriesOnPage.length !== 0 ? (\n          <MUIDataTable\n            title={\"Hacker News API top 2 result\"}\n            data={renderedStoriesOnPage}\n            columns={columnsOptions}\n            options={options}\n          />\n        ) : null}\n        <NewItemAddedConfirmSnackbar\n          openNewItemAddedConfirmSnackbar={openNewItemAddedConfirmSnackbar}\n          closeNewItemConfirmSnackbar={closeNewItemConfirmSnackbar}\n          noOfNewStoryAfterPolling={noOfNewStoryAfterPolling}\n        />\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}